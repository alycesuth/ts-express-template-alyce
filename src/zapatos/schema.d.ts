/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **albums**
   * - Table in database
   */
  export namespace albums {
    export type Table = 'albums';
    export interface Selectable {
      /**
      * **albums.album_artist_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_artist_id: number | null;
      /**
      * **albums.genre_id**
      * - `int4` in database
      * - Nullable, no default
      */
      genre_id: number | null;
      /**
      * **albums.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('albums_id_seq'::regclass)`
      */
      id: number;
      /**
      * **albums.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **albums.album_artist_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_artist_id: number | null;
      /**
      * **albums.genre_id**
      * - `int4` in database
      * - Nullable, no default
      */
      genre_id: number | null;
      /**
      * **albums.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('albums_id_seq'::regclass)`
      */
      id: number;
      /**
      * **albums.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **albums.album_artist_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_artist_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **albums.genre_id**
      * - `int4` in database
      * - Nullable, no default
      */
      genre_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **albums.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('albums_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **albums.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **albums.album_artist_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_artist_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **albums.genre_id**
      * - `int4` in database
      * - Nullable, no default
      */
      genre_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **albums.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('albums_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **albums.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **albums.album_artist_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_artist_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **albums.genre_id**
      * - `int4` in database
      * - Nullable, no default
      */
      genre_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **albums.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('albums_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **albums.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'albums_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **artists**
   * - Table in database
   */
  export namespace artists {
    export type Table = 'artists';
    export interface Selectable {
      /**
      * **artists.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('artists_id_seq'::regclass)`
      */
      id: number;
      /**
      * **artists.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **artists.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('artists_id_seq'::regclass)`
      */
      id: number;
      /**
      * **artists.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **artists.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('artists_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **artists.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **artists.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('artists_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **artists.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **artists.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('artists_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **artists.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'artists_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **artists_tracks**
   * - Table in database
   */
  export namespace artists_tracks {
    export type Table = 'artists_tracks';
    export interface Selectable {
      /**
      * **artists_tracks.artist_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      artist_id: number;
      /**
      * **artists_tracks.track_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      track_id: number;
    }
    export interface JSONSelectable {
      /**
      * **artists_tracks.artist_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      artist_id: number;
      /**
      * **artists_tracks.track_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      track_id: number;
    }
    export interface Whereable {
      /**
      * **artists_tracks.artist_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      artist_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **artists_tracks.track_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      track_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **artists_tracks.artist_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      artist_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **artists_tracks.track_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      track_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **artists_tracks.artist_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      artist_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **artists_tracks.track_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      track_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'artists_tracks_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **genres**
   * - Table in database
   */
  export namespace genres {
    export type Table = 'genres';
    export interface Selectable {
      /**
      * **genres.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('generes_id_seq'::regclass)`
      */
      id: number;
      /**
      * **genres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **genres.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('generes_id_seq'::regclass)`
      */
      id: number;
      /**
      * **genres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **genres.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('generes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **genres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **genres.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('generes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **genres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **genres.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('generes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **genres.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'genres_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tracks**
   * - Table in database
   */
  export namespace tracks {
    export type Table = 'tracks';
    export interface Selectable {
      /**
      * **tracks.album_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_id: number | null;
      /**
      * **tracks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tracks_id_seq'::regclass)`
      */
      id: number;
      /**
      * **tracks.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface JSONSelectable {
      /**
      * **tracks.album_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_id: number | null;
      /**
      * **tracks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tracks_id_seq'::regclass)`
      */
      id: number;
      /**
      * **tracks.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface Whereable {
      /**
      * **tracks.album_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tracks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tracks_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tracks.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tracks.album_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tracks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tracks_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **tracks.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tracks.album_id**
      * - `int4` in database
      * - Nullable, no default
      */
      album_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tracks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tracks_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **tracks.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tracks_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = albums.Table | artists.Table | artists_tracks.Table | genres.Table | schema_migrations.Table | tracks.Table;
    export type Selectable = albums.Selectable | artists.Selectable | artists_tracks.Selectable | genres.Selectable | schema_migrations.Selectable | tracks.Selectable;
    export type JSONSelectable = albums.JSONSelectable | artists.JSONSelectable | artists_tracks.JSONSelectable | genres.JSONSelectable | schema_migrations.JSONSelectable | tracks.JSONSelectable;
    export type Whereable = albums.Whereable | artists.Whereable | artists_tracks.Whereable | genres.Whereable | schema_migrations.Whereable | tracks.Whereable;
    export type Insertable = albums.Insertable | artists.Insertable | artists_tracks.Insertable | genres.Insertable | schema_migrations.Insertable | tracks.Insertable;
    export type Updatable = albums.Updatable | artists.Updatable | artists_tracks.Updatable | genres.Updatable | schema_migrations.Updatable | tracks.Updatable;
    export type UniqueIndex = albums.UniqueIndex | artists.UniqueIndex | artists_tracks.UniqueIndex | genres.UniqueIndex | schema_migrations.UniqueIndex | tracks.UniqueIndex;
    export type Column = albums.Column | artists.Column | artists_tracks.Column | genres.Column | schema_migrations.Column | tracks.Column;
  
    export type AllBaseTables = [albums.Table, artists.Table, artists_tracks.Table, genres.Table, schema_migrations.Table, tracks.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [albums.Table, artists.Table, artists_tracks.Table, genres.Table, schema_migrations.Table, tracks.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "albums": albums.Selectable;
    "artists": artists.Selectable;
    "artists_tracks": artists_tracks.Selectable;
    "genres": genres.Selectable;
    "schema_migrations": schema_migrations.Selectable;
    "tracks": tracks.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "albums": albums.JSONSelectable;
    "artists": artists.JSONSelectable;
    "artists_tracks": artists_tracks.JSONSelectable;
    "genres": genres.JSONSelectable;
    "schema_migrations": schema_migrations.JSONSelectable;
    "tracks": tracks.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "albums": albums.Whereable;
    "artists": artists.Whereable;
    "artists_tracks": artists_tracks.Whereable;
    "genres": genres.Whereable;
    "schema_migrations": schema_migrations.Whereable;
    "tracks": tracks.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "albums": albums.Insertable;
    "artists": artists.Insertable;
    "artists_tracks": artists_tracks.Insertable;
    "genres": genres.Insertable;
    "schema_migrations": schema_migrations.Insertable;
    "tracks": tracks.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "albums": albums.Updatable;
    "artists": artists.Updatable;
    "artists_tracks": artists_tracks.Updatable;
    "genres": genres.Updatable;
    "schema_migrations": schema_migrations.Updatable;
    "tracks": tracks.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "albums": albums.UniqueIndex;
    "artists": artists.UniqueIndex;
    "artists_tracks": artists_tracks.UniqueIndex;
    "genres": genres.UniqueIndex;
    "schema_migrations": schema_migrations.UniqueIndex;
    "tracks": tracks.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "albums": albums.Column;
    "artists": artists.Column;
    "artists_tracks": artists_tracks.Column;
    "genres": genres.Column;
    "schema_migrations": schema_migrations.Column;
    "tracks": tracks.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "albums": albums.SQL;
    "artists": artists.SQL;
    "artists_tracks": artists_tracks.SQL;
    "genres": genres.SQL;
    "schema_migrations": schema_migrations.SQL;
    "tracks": tracks.SQL;
  }[T];

}
